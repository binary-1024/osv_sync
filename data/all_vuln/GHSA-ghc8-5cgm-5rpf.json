{
  "affected": [
    {
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2023/09/GHSA-ghc8-5cgm-5rpf/GHSA-ghc8-5cgm-5rpf.json"
      },
      "package": {
        "ecosystem": "crates.io",
        "name": "inventory",
        "purl": "pkg:cargo/inventory"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "0.2.0"
            }
          ],
          "type": "SEMVER"
        }
      ]
    }
  ],
  "aliases": [
    "RUSTSEC-2023-0057"
  ],
  "database_specific": {
    "cwe_ids": [],
    "github_reviewed": true,
    "github_reviewed_at": "2023-09-11T20:43:17Z",
    "nvd_published_at": null,
    "severity": "MODERATE"
  },
  "details": "Affected versions allow arbitrary caller-provided code to execute before the lifetime of `main`.\n\nIf the caller-provided code accesses particular pieces of the standard library that require an initialized Rust runtime, such as `std::io` or `std::thread`, these may not behave as documented. Panics are likely; UB is possible.\n\nThe flaw was corrected by enforcing that only code written within the `inventory` crate, which is guaranteed not to access runtime-dependent parts of the standard library, runs before `main`. Caller-provided code is restricted to running at compile time.\n",
  "id": "GHSA-ghc8-5cgm-5rpf",
  "modified": "2024-02-10T16:26:48.633370Z",
  "published": "2023-09-11T20:43:17Z",
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/dtolnay/inventory/pull/43"
    },
    {
      "type": "WEB",
      "url": "https://github.com/dtolnay/inventory/commit/b853350a3800e38d2cb9950355b80bc8b8d3959c"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/dtolnay/inventory"
    },
    {
      "type": "WEB",
      "url": "https://rustsec.org/advisories/RUSTSEC-2023-0057.html"
    }
  ],
  "schema_version": "1.7.0",
  "summary": "Inventory fails to prohibit standard library access prior to initialization of Rust standard library runtime"
}