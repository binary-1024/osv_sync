{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2025-38354.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:12",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.1.147-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": [
        "6.1.106-1",
        "6.1.106-2",
        "6.1.106-3",
        "6.1.112-1",
        "6.1.115-1",
        "6.1.119-1",
        "6.1.123-1",
        "6.1.124-1",
        "6.1.128-1",
        "6.1.129-1",
        "6.1.133-1",
        "6.1.135-1",
        "6.1.137-1",
        "6.1.139-1",
        "6.1.140-1",
        "6.1.27-1",
        "6.1.37-1",
        "6.1.38-1",
        "6.1.38-2",
        "6.1.38-2~bpo11+1",
        "6.1.38-3",
        "6.1.38-4",
        "6.1.38-4~bpo11+1",
        "6.1.52-1",
        "6.1.55-1",
        "6.1.55-1~bpo11+1",
        "6.1.64-1",
        "6.1.66-1",
        "6.1.67-1",
        "6.1.69-1",
        "6.1.69-1~bpo11+1",
        "6.1.76-1",
        "6.1.76-1~bpo11+1",
        "6.1.82-1",
        "6.1.85-1",
        "6.1.90-1",
        "6.1.90-1~bpo11+1",
        "6.1.94-1",
        "6.1.94-1~bpo11+1",
        "6.1.98-1",
        "6.1.99-1"
      ]
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2025-38354.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:13",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.12.37-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2025-38354.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.12.37-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  drm/msm/gpu: Fix crash when throttling GPU immediately during boot  There is a small chance that the GPU is already hot during boot. In that case, the call to of_devfreq_cooling_register() will immediately try to apply devfreq cooling, as seen in the following crash:    Unable to handle kernel paging request at virtual address 0000000000014110   pc : a6xx_gpu_busy+0x1c/0x58 [msm]   lr : msm_devfreq_get_dev_status+0xbc/0x140 [msm]   Call trace:    a6xx_gpu_busy+0x1c/0x58 [msm] (P)    devfreq_simple_ondemand_func+0x3c/0x150    devfreq_update_target+0x44/0xd8    qos_max_notifier_call+0x30/0x84    blocking_notifier_call_chain+0x6c/0xa0    pm_qos_update_target+0xd0/0x110    freq_qos_apply+0x3c/0x74    apply_constraint+0x88/0x148    __dev_pm_qos_update_request+0x7c/0xcc    dev_pm_qos_update_request+0x38/0x5c    devfreq_cooling_set_cur_state+0x98/0xf0    __thermal_cdev_update+0x64/0xb4    thermal_cdev_update+0x4c/0x58    step_wise_manage+0x1f0/0x318    __thermal_zone_device_update+0x278/0x424    __thermal_cooling_device_register+0x2bc/0x308    thermal_of_cooling_device_register+0x10/0x1c    of_devfreq_cooling_register_power+0x240/0x2bc    of_devfreq_cooling_register+0x14/0x20    msm_devfreq_init+0xc4/0x1a0 [msm]    msm_gpu_init+0x304/0x574 [msm]    adreno_gpu_init+0x1c4/0x2e0 [msm]    a6xx_gpu_init+0x5c8/0x9c8 [msm]    adreno_bind+0x2a8/0x33c [msm]    ...  At this point we haven't initialized the GMU at all yet, so we cannot read the GMU registers inside a6xx_gpu_busy(). A similar issue was fixed before in commit 6694482a70e9 (\"drm/msm: Avoid unclocked GMU register access in 6xx gpu_busy\"): msm_devfreq_init() does call devfreq_suspend_device(), but unlike msm_devfreq_suspend(), it doesn't set the df->suspended flag accordingly. This means the df->suspended flag does not match the actual devfreq state after initialization and msm_devfreq_get_dev_status() will end up accessing GMU registers, causing the crash.  Fix this by setting df->suspended correctly during initialization.  Patchwork: https://patchwork.freedesktop.org/patch/650772/",
  "id": "DEBIAN-CVE-2025-38354",
  "modified": "2025-09-25T04:41:11.263388Z",
  "published": "2025-07-25T13:15:24Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2025-38354"
    }
  ],
  "schema_version": "1.7.3",
  "upstream": [
    "CVE-2025-38354"
  ]
}