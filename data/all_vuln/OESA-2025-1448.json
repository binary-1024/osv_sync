{
  "affected": [
    {
      "database_specific": {
        "source": "https://repo.openeuler.org/security/data/osv/OESA-2025-1448.json"
      },
      "ecosystem_specific": {
        "aarch64": [
          "kernel-5.10.0-261.0.0.163.oe2203sp3.aarch64.rpm",
          "kernel-debuginfo-5.10.0-261.0.0.163.oe2203sp3.aarch64.rpm",
          "kernel-debugsource-5.10.0-261.0.0.163.oe2203sp3.aarch64.rpm",
          "kernel-devel-5.10.0-261.0.0.163.oe2203sp3.aarch64.rpm",
          "kernel-headers-5.10.0-261.0.0.163.oe2203sp3.aarch64.rpm",
          "kernel-source-5.10.0-261.0.0.163.oe2203sp3.aarch64.rpm",
          "kernel-tools-5.10.0-261.0.0.163.oe2203sp3.aarch64.rpm",
          "kernel-tools-debuginfo-5.10.0-261.0.0.163.oe2203sp3.aarch64.rpm",
          "kernel-tools-devel-5.10.0-261.0.0.163.oe2203sp3.aarch64.rpm",
          "perf-5.10.0-261.0.0.163.oe2203sp3.aarch64.rpm",
          "perf-debuginfo-5.10.0-261.0.0.163.oe2203sp3.aarch64.rpm",
          "python3-perf-5.10.0-261.0.0.163.oe2203sp3.aarch64.rpm",
          "python3-perf-debuginfo-5.10.0-261.0.0.163.oe2203sp3.aarch64.rpm"
        ],
        "src": [
          "kernel-5.10.0-261.0.0.163.oe2203sp3.src.rpm"
        ],
        "x86_64": [
          "kernel-5.10.0-261.0.0.163.oe2203sp3.x86_64.rpm",
          "kernel-debuginfo-5.10.0-261.0.0.163.oe2203sp3.x86_64.rpm",
          "kernel-debugsource-5.10.0-261.0.0.163.oe2203sp3.x86_64.rpm",
          "kernel-devel-5.10.0-261.0.0.163.oe2203sp3.x86_64.rpm",
          "kernel-headers-5.10.0-261.0.0.163.oe2203sp3.x86_64.rpm",
          "kernel-source-5.10.0-261.0.0.163.oe2203sp3.x86_64.rpm",
          "kernel-tools-5.10.0-261.0.0.163.oe2203sp3.x86_64.rpm",
          "kernel-tools-debuginfo-5.10.0-261.0.0.163.oe2203sp3.x86_64.rpm",
          "kernel-tools-devel-5.10.0-261.0.0.163.oe2203sp3.x86_64.rpm",
          "perf-5.10.0-261.0.0.163.oe2203sp3.x86_64.rpm",
          "perf-debuginfo-5.10.0-261.0.0.163.oe2203sp3.x86_64.rpm",
          "python3-perf-5.10.0-261.0.0.163.oe2203sp3.x86_64.rpm",
          "python3-perf-debuginfo-5.10.0-261.0.0.163.oe2203sp3.x86_64.rpm"
        ]
      },
      "package": {
        "ecosystem": "openEuler:22.03-LTS-SP3",
        "name": "kernel",
        "purl": "pkg:rpm/openEuler/kernel&distro=openEuler-22.03-LTS-SP3"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "5.10.0-261.0.0.163.oe2203sp3"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "database_specific": {
    "severity": "High"
  },
  "details": "The Linux Kernel, the operating system core itself.\r\n\r\nSecurity Fix(es):\n\nIn the Linux kernel, the following vulnerability has been resolved:\n\nmm/khugepaged: fix -&gt;anon_vma race\n\nIf an -&gt;anon_vma is attached to the VMA, collapse_and_free_pmd() requires\nit to be locked.\n\nPage table traversal is allowed under any one of the mmap lock, the\nanon_vma lock (if the VMA is associated with an anon_vma), and the\nmapping lock (if the VMA is associated with a mapping); and so to be\nable to remove page tables, we must hold all three of them. \nretract_page_tables() bails out if an -&gt;anon_vma is attached, but does\nthis check before holding the mmap lock (as the comment above the check\nexplains).\n\nIf we racily merged an existing -&gt;anon_vma (shared with a child\nprocess) from a neighboring VMA, subsequent rmap traversals on pages\nbelonging to the child will be able to see the page tables that we are\nconcurrently removing while assuming that nothing else can access them.\n\nRepeat the -&gt;anon_vma check once we hold the mmap lock to ensure that\nthere really is no concurrent page table access.\n\nHitting this bug causes a lockdep warning in collapse_and_free_pmd(),\nin the line &quot;lockdep_assert_held_write(&amp;vma-&gt;anon_vma-&gt;root-&gt;rwsem)&quot;. \nIt can also lead to use-after-free access.(CVE-2023-52935)\n\nIn the Linux kernel, the following vulnerability has been resolved:\n\nbnxt: Do not read past the end of test names\n\nTest names were being concatenated based on a offset beyond the end of\nthe first name, which tripped the buffer overflow detection logic:\n\n detected buffer overflow in strnlen\n [...]\n Call Trace:\n bnxt_ethtool_init.cold+0x18/0x18\n\nRefactor struct hwrm_selftest_qlist_output to use an actual array,\nand adjust the concatenation to use snprintf() rather than a series of\nstrncat() calls.(CVE-2023-53010)\n\nIn the Linux kernel, the following vulnerability has been resolved:\n\ndrm/amdgpu: avoid buffer overflow attach in smu_sys_set_pp_table()\n\nIt malicious user provides a small pptable through sysfs and then\na bigger pptable, it may cause buffer overflow attack in function\nsmu_sys_set_pp_table().(CVE-2025-21780)\n\nIn the Linux kernel, the following vulnerability has been resolved:\n\nbatman-adv: fix panic during interface removal\n\nReference counting is used to ensure that\nbatadv_hardif_neigh_node and batadv_hard_iface\nare not freed before/during\nbatadv_v_elp_throughput_metric_update work is\nfinished.\n\nBut there isn&apos;t a guarantee that the hard if will\nremain associated with a soft interface up until\nthe work is finished.\n\nThis fixes a crash triggered by reboot that looks\nlike this:\n\nCall trace:\n batadv_v_mesh_free+0xd0/0x4dc [batman_adv]\n batadv_v_elp_throughput_metric_update+0x1c/0xa4\n process_one_work+0x178/0x398\n worker_thread+0x2e8/0x4d0\n kthread+0xd8/0xdc\n ret_from_fork+0x10/0x20\n\n(the batadv_v_mesh_free call is misleading,\nand does not actually happen)\n\nI was able to make the issue happen more reliably\nby changing hardif_neigh-&gt;bat_v.metric_work work\nto be delayed work. This allowed me to track down\nand confirm the fix.\n\n[sven@narfation.org: prevent entering batadv_v_elp_get_throughput without\n soft_iface](CVE-2025-21781)\n\nIn the Linux kernel, the following vulnerability has been resolved:\n\nusbnet: gl620a: fix endpoint checking in genelink_bind()\n\nSyzbot reports [1] a warning in usb_submit_urb() triggered by\ninconsistencies between expected and actually present endpoints\nin gl620a driver. Since genelink_bind() does not properly\nverify whether specified eps are in fact provided by the device,\nin this case, an artificially manufactured one, one may get a\nmismatch.\n\nFix the issue by resorting to a usbnet utility function\nusbnet_get_endpoints(), usually reserved for this very problem.\nCheck for endpoints and return early before proceeding further if\nany are missing.\n\n[1] Syzbot report:\nusb 5-1: Manufacturer: syz\nusb 5-1: SerialNumber: syz\nusb 5-1: config 0 descriptor??\ngl620a 5-1:0.23 usb0: register &apos;gl620a&apos; at usb-dummy_hcd.0-1, ...\n------------[ cut here ]------------\nusb 5-1: BOGUS urb xfer, pipe 3 != type 1\nWARNING: CPU: 2 PID: 1841 at drivers/usb/core/urb.c:503 usb_submit_urb+0xe4b/0x1730 drivers/usb/core/urb.c:503\nModules linked in:\nCPU: 2 UID: 0 PID: 1841 Comm: kworker/2:2 Not tainted 6.12.0-syzkaller-07834-g06afb0f36106 #0\nHardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014\nWorkqueue: mld mld_ifc_work\nRIP: 0010:usb_submit_urb+0xe4b/0x1730 drivers/usb/core/urb.c:503\n...\nCall Trace:\n &lt;TASK&gt;\n usbnet_start_xmit+0x6be/0x2780 drivers/net/usb/usbnet.c:1467\n __netdev_start_xmit include/linux/netdevice.h:5002 [inline]\n netdev_start_xmit include/linux/netdevice.h:5011 [inline]\n xmit_one net/core/dev.c:3590 [inline]\n dev_hard_start_xmit+0x9a/0x7b0 net/core/dev.c:3606\n sch_direct_xmit+0x1ae/0xc30 net/sched/sch_generic.c:343\n __dev_xmit_skb net/core/dev.c:3827 [inline]\n __dev_queue_xmit+0x13d4/0x43e0 net/core/dev.c:4400\n dev_queue_xmit include/linux/netdevice.h:3168 [inline]\n neigh_resolve_output net/core/neighbour.c:1514 [inline]\n neigh_resolve_output+0x5bc/0x950 net/core/neighbour.c:1494\n neigh_output include/net/neighbour.h:539 [inline]\n ip6_finish_output2+0xb1b/0x2070 net/ipv6/ip6_output.c:141\n __ip6_finish_output net/ipv6/ip6_output.c:215 [inline]\n ip6_finish_output+0x3f9/0x1360 net/ipv6/ip6_output.c:226\n NF_HOOK_COND include/linux/netfilter.h:303 [inline]\n ip6_output+0x1f8/0x540 net/ipv6/ip6_output.c:247\n dst_output include/net/dst.h:450 [inline]\n NF_HOOK include/linux/netfilter.h:314 [inline]\n NF_HOOK include/linux/netfilter.h:308 [inline]\n mld_sendpack+0x9f0/0x11d0 net/ipv6/mcast.c:1819\n mld_send_cr net/ipv6/mcast.c:2120 [inline]\n mld_ifc_work+0x740/0xca0 net/ipv6/mcast.c:2651\n process_one_work+0x9c5/0x1ba0 kernel/workqueue.c:3229\n process_scheduled_works kernel/workqueue.c:3310 [inline]\n worker_thread+0x6c8/0xf00 kernel/workqueue.c:3391\n kthread+0x2c1/0x3a0 kernel/kthread.c:389\n ret_from_fork+0x45/0x80 arch/x86/kernel/process.c:147\n ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244\n &lt;/TASK&gt;(CVE-2025-21877)\n\nIn the Linux kernel, the following vulnerability has been resolved:\n\nftrace: Avoid potential division by zero in function_stat_show()\n\nCheck whether denominator expression x * (x - 1) * 1000 mod {2^32, 2^64}\nproduce zero and skip stddev computation in that case.\n\nFor now don&apos;t care about rec-&gt;counter * rec-&gt;counter overflow because\nrec-&gt;time * rec-&gt;time overflow will likely happen earlier.(CVE-2025-21898)\n\nIn the Linux kernel, the following vulnerability has been resolved:\n\nrapidio: add check for rio_add_net() in rio_scan_alloc_net()\n\nThe return value of rio_add_net() should be checked.  If it fails,\nput_device() should be called to free the memory and give up the reference\ninitialized in rio_add_net().(CVE-2025-21935)\n\nIn the Linux kernel, the following vulnerability has been resolved:\n\niscsi_ibft: Fix UBSAN shift-out-of-bounds warning in ibft_attr_show_nic()\n\nWhen performing an iSCSI boot using IPv6, iscsistart still reads the\n/sys/firmware/ibft/ethernetX/subnet-mask entry. Since the IPv6 prefix\nlength is 64, this causes the shift exponent to become negative,\ntriggering a UBSAN warning. As the concept of a subnet mask does not\napply to IPv6, the value is set to ~0 to suppress the warning message.(CVE-2025-21993)\n\nIn the Linux kernel, the following vulnerability has been resolved:\n\ntracing: Fix use-after-free in print_graph_function_flags during tracer switching\n\nKairui reported a UAF issue in print_graph_function_flags() during\nftrace stress testing [1]. This issue can be reproduced if puting a\n&apos;mdelay(10)&apos; after &apos;mutex_unlock(&amp;trace_types_lock)&apos; in s_start(),\nand executing the following script:\n\n  $ echo function_graph &gt; current_tracer\n  $ cat trace &gt; /dev/null &amp;\n  $ sleep 5  # Ensure the &apos;cat&apos; reaches the &apos;mdelay(10)&apos; point\n  $ echo timerlat &gt; current_tracer\n\nThe root cause lies in the two calls to print_graph_function_flags\nwithin print_trace_line during each s_show():\n\n  * One through &apos;iter-&gt;trace-&gt;print_line()&apos;;\n  * Another through &apos;event-&gt;funcs-&gt;trace()&apos;, which is hidden in\n    print_trace_fmt() before print_trace_line returns.\n\nTracer switching only updates the former, while the latter continues\nto use the print_line function of the old tracer, which in the script\nabove is print_graph_function_flags.\n\nMoreover, when switching from the &apos;function_graph&apos; tracer to the\n&apos;timerlat&apos; tracer, s_start only calls graph_trace_close of the\n&apos;function_graph&apos; tracer to free &apos;iter-&gt;private&apos;, but does not set\nit to NULL. This provides an opportunity for &apos;event-&gt;funcs-&gt;trace()&apos;\nto use an invalid &apos;iter-&gt;private&apos;.\n\nTo fix this issue, set &apos;iter-&gt;private&apos; to NULL immediately after\nfreeing it in graph_trace_close(), ensuring that an invalid pointer\nis not passed to other tracers. Additionally, clean up the unnecessary\n&apos;iter-&gt;private = NULL&apos; during each &apos;cat trace&apos; when using wakeup and\nirqsoff tracers.\n\n [1] https://lore.kernel.org/all/20231112150030.84609-1-ryncsn@gmail.com/(CVE-2025-22035)",
  "id": "OESA-2025-1448",
  "modified": "2025-09-03T06:31:08.306533Z",
  "published": "2025-04-25T14:05:08Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://www.openeuler.org/zh/security/security-bulletins/detail/?id=openEuler-SA-2025-1448"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2023-52935"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2023-53010"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-21780"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-21781"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-21877"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-21898"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-21935"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-21993"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-22035"
    }
  ],
  "schema_version": "1.7.3",
  "summary": "kernel security update",
  "upstream": [
    "CVE-2023-52935",
    "CVE-2023-53010",
    "CVE-2025-21780",
    "CVE-2025-21781",
    "CVE-2025-21877",
    "CVE-2025-21898",
    "CVE-2025-21935",
    "CVE-2025-21993",
    "CVE-2025-22035"
  ]
}