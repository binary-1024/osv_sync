{
  "affected": [
    {
      "database_specific": {
        "last_known_affected_version_range": "<= 4.2.3.Final",
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/08/GHSA-prj3-ccx8-p6x4/GHSA-prj3-ccx8-p6x4.json"
      },
      "package": {
        "ecosystem": "Maven",
        "name": "io.netty:netty-codec-http2",
        "purl": "pkg:maven/io.netty/netty-codec-http2"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "4.2.0.Alpha1"
            },
            {
              "fixed": "4.2.4.Final"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": [
        "4.2.0.Alpha1",
        "4.2.0.Alpha2",
        "4.2.0.Alpha3",
        "4.2.0.Alpha4",
        "4.2.0.Alpha5",
        "4.2.0.Beta1",
        "4.2.0.Final",
        "4.2.0.RC1",
        "4.2.0.RC2",
        "4.2.0.RC3",
        "4.2.0.RC4",
        "4.2.1.Final",
        "4.2.2.Final",
        "4.2.3.Final"
      ]
    },
    {
      "database_specific": {
        "last_known_affected_version_range": "<= 4.1.123.Final",
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/08/GHSA-prj3-ccx8-p6x4/GHSA-prj3-ccx8-p6x4.json"
      },
      "package": {
        "ecosystem": "Maven",
        "name": "io.netty:netty-codec-http2",
        "purl": "pkg:maven/io.netty/netty-codec-http2"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "4.1.124.Final"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": [
        "4.1.0.Beta4",
        "4.1.0.Beta5",
        "4.1.0.Beta6",
        "4.1.0.Beta7",
        "4.1.0.Beta8",
        "4.1.0.CR1",
        "4.1.0.CR2",
        "4.1.0.CR3",
        "4.1.0.CR4",
        "4.1.0.CR5",
        "4.1.0.CR6",
        "4.1.0.CR7",
        "4.1.0.Final",
        "4.1.1.Final",
        "4.1.10.Final",
        "4.1.100.Final",
        "4.1.101.Final",
        "4.1.102.Final",
        "4.1.103.Final",
        "4.1.104.Final",
        "4.1.105.Final",
        "4.1.106.Final",
        "4.1.107.Final",
        "4.1.108.Final",
        "4.1.109.Final",
        "4.1.11.Final",
        "4.1.110.Final",
        "4.1.111.Final",
        "4.1.112.Final",
        "4.1.113.Final",
        "4.1.114.Final",
        "4.1.115.Final",
        "4.1.116.Final",
        "4.1.117.Final",
        "4.1.118.Final",
        "4.1.119.Final",
        "4.1.12.Final",
        "4.1.120.Final",
        "4.1.121.Final",
        "4.1.122.Final",
        "4.1.123.Final",
        "4.1.13.Final",
        "4.1.14.Final",
        "4.1.15.Final",
        "4.1.16.Final",
        "4.1.17.Final",
        "4.1.18.Final",
        "4.1.19.Final",
        "4.1.2.Final",
        "4.1.20.Final",
        "4.1.21.Final",
        "4.1.22.Final",
        "4.1.23.Final",
        "4.1.24.Final",
        "4.1.25.Final",
        "4.1.26.Final",
        "4.1.27.Final",
        "4.1.28.Final",
        "4.1.29.Final",
        "4.1.3.Final",
        "4.1.30.Final",
        "4.1.31.Final",
        "4.1.32.Final",
        "4.1.33.Final",
        "4.1.34.Final",
        "4.1.35.Final",
        "4.1.36.Final",
        "4.1.37.Final",
        "4.1.38.Final",
        "4.1.39.Final",
        "4.1.4.Final",
        "4.1.40.Final",
        "4.1.41.Final",
        "4.1.42.Final",
        "4.1.43.Final",
        "4.1.44.Final",
        "4.1.45.Final",
        "4.1.46.Final",
        "4.1.47.Final",
        "4.1.48.Final",
        "4.1.49.Final",
        "4.1.5.Final",
        "4.1.50.Final",
        "4.1.51.Final",
        "4.1.52.Final",
        "4.1.53.Final",
        "4.1.54.Final",
        "4.1.55.Final",
        "4.1.56.Final",
        "4.1.57.Final",
        "4.1.58.Final",
        "4.1.59.Final",
        "4.1.6.Final",
        "4.1.60.Final",
        "4.1.61.Final",
        "4.1.62.Final",
        "4.1.63.Final",
        "4.1.64.Final",
        "4.1.65.Final",
        "4.1.66.Final",
        "4.1.67.Final",
        "4.1.68.Final",
        "4.1.69.Final",
        "4.1.7.Final",
        "4.1.70.Final",
        "4.1.71.Final",
        "4.1.72.Final",
        "4.1.73.Final",
        "4.1.74.Final",
        "4.1.75.Final",
        "4.1.76.Final",
        "4.1.77.Final",
        "4.1.78.Final",
        "4.1.79.Final",
        "4.1.8.Final",
        "4.1.80.Final",
        "4.1.81.Final",
        "4.1.82.Final",
        "4.1.83.Final",
        "4.1.84.Final",
        "4.1.85.Final",
        "4.1.86.Final",
        "4.1.87.Final",
        "4.1.88.Final",
        "4.1.89.Final",
        "4.1.9.Final",
        "4.1.90.Final",
        "4.1.91.Final",
        "4.1.92.Final",
        "4.1.93.Final",
        "4.1.94.Final",
        "4.1.95.Final",
        "4.1.96.Final",
        "4.1.97.Final",
        "4.1.98.Final",
        "4.1.99.Final"
      ]
    }
  ],
  "aliases": [
    "CVE-2025-55163"
  ],
  "database_specific": {
    "cwe_ids": [
      "CWE-770"
    ],
    "github_reviewed": true,
    "github_reviewed_at": "2025-08-13T19:06:56Z",
    "nvd_published_at": "2025-08-13T15:15:39Z",
    "severity": "HIGH"
  },
  "details": "Below is a technical explanation of a newly discovered vulnerability in HTTP/2, which we refer to as \u201cMadeYouReset.\u201d\n\n### MadeYouReset Vulnerability Summary\nThe MadeYouReset DDoS vulnerability is a logical vulnerability in the HTTP/2 protocol, that uses malformed HTTP/2 control frames in order to break the max concurrent streams limit - which results in resource exhaustion and distributed denial of service.\n\n### Mechanism\nThe vulnerability uses malformed HTTP/2 control frames, or malformed flow, in order to make the server reset streams created by the client (using the RST_STREAM frame). \nThe vulnerability could be triggered by several primitives, defined by the RFC of HTTP/2 (RFC 9113). The Primitives are:\n1. WINDOW_UPDATE frame with an increment of 0 or an increment that makes the window exceed 2^31 - 1. (section 6.9 + 6.9.1)\n2. HEADERS or DATA frames sent on a half-closed (remote) stream (which was closed using the END_STREAM flag). (note that for some implementations it's possible a CONTINUATION frame to trigger that as well - but it's very rare). (Section 5.1)\n3. PRIORITY frame with a length other than 5. (section 6.3)\nFrom our experience, the primitives are likely to exist in the decreasing order listed above.\nNote that based on the implementation of the library, other primitives (which are not defined by the RFC) might exist - meaning scenarios in which RST_STREAM is not supposed to be sent, but in the implementation it does. On the other hand - some RFC-defined primitives might not work, even though they are defined by the RFC (as some implementations are not fully complying with RFC). For example, some implementations we\u2019ve seen discard the PRIORITY frame - and thus does not return RST_STREAM, and some implementations send GO_AWAY when receiving a WINDOW_UPDATE frame with increment of 0.\n\nThe vulnerability takes advantage of a design flaw in the HTTP/2 protocol - While HTTP/2 has a limit on the number of concurrently active streams per connection (which is usually 100, and is set by the parameter SETTINGS_MAX_CONCURRENT_STREAMS), the number of active streams is not counted correctly - when a stream is reset, it is immediately considered not active, and thus unaccounted for in the active streams counter. \nWhile the protocol does not count those streams as active, the server\u2019s backend logic still processes and handles the requests that were canceled.\n\nThus, the attacker can exploit this vulnerability to cause the server to handle an unbounded number of concurrent streams from a client on the same connection. The exploitation is very simple: the client issues a request in a stream, and then sends the control frame that causes the server to send a RST_STREAM.\n\n### Attack Flow\nFor example, a possible attack scenario can be: \n1. Attacker opens an HTTP/2 connection to the server.\n2. Attacker sends HEADERS frame with END_STREAM flag on a new stream X.  \n3. Attacker sends WINDOW_UPDATE for stream X with flow-control window of 0.\n4. The server receives the WINDOW_UPDATE and immediately sends RST_STREAM for stream X to the client (+ decreases the active streams counter by 1).\n\nThe attacker can repeat steps 2+3 as rapidly as it is capable, since the active streams counter never exceeds 1 and the attacker does not need to wait for the response from the server.\nThis leads to resource exhaustion and distributed denial of service vulnerabilities with an impact of: CPU overload and/or memory exhaustion (implementation dependent)\n\n### Comparison to Rapid Reset\nThe vulnerability takes advantage of a design flow in the HTTP/2 protocol that was also used in the Rapid Reset vulnerability (CVE-2023-44487) which was exploited as a zero-day in the wild in August 2023 to October 2023, against multiple services and vendors.\nThe Rapid Reset vulnerability uses RST_STREAM frames sent from the client, in order to create an unbounded amount of concurrent streams - it was given a CVSS score of 7.5.\nRapid Reset was mostly mitigated by limiting the number/rate of RST_STREAM sent from the client, which does not mitigate the MadeYouReset attack - since it triggers the server to send a RST_STREAM.\n\n### Suggested Mitigations for MadeYouReset\nA quick and easy mitigation will be to limit the number/rate of RST_STREAMs sent from the server.\nIt is also possible to limit the number/rate of control frames sent by the client (e.g. WINDOW_UPDATE and PRIORITY), and treat protocol flow errors as a connection error.\n\nAs mentioned in our previous message, this is a protocol-level vulnerability that affects multiple vendors and implementations. Given its broad impact, it is the shared responsibility of all parties involved to handle the disclosure process carefully and coordinate mitigations effectively.\n\n\nIf you have any questions, we will be happy to clarify or schedule a Zoom call.\n\nGal, Anat and Yaniv.",
  "id": "GHSA-prj3-ccx8-p6x4",
  "modified": "2025-08-13T19:42:31.082803Z",
  "published": "2025-08-13T19:06:56Z",
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/netty/netty/security/advisories/GHSA-prj3-ccx8-p6x4"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-55163"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/netty/netty"
    }
  ],
  "related": [
    "CGA-43hm-mhr5-rh4m",
    "CGA-5469-cjg8-9246",
    "CGA-5r4q-3f8h-jj59",
    "CGA-5w52-jc48-w27g",
    "CGA-f7xm-9r25-c899",
    "CGA-fv39-7hxx-q4w5",
    "CGA-fvfg-6345-286g",
    "CGA-gf6w-x5vj-h84q",
    "CGA-gvfm-x6gc-cmfx",
    "CGA-h88q-2f54-3324",
    "CGA-jf59-wpp9-63fq",
    "CGA-p39r-4cfr-gq82",
    "CGA-rjqw-qpx3-2fgc",
    "CGA-vvg5-vc6g-xcv7",
    "CGA-vvw2-qqg3-vfgq",
    "CGA-wv2j-rx36-mhx6",
    "CGA-wx9r-rvwr-qpqj"
  ],
  "schema_version": "1.7.3",
  "severity": [
    {
      "score": "CVSS:4.0/AV:N/AC:L/AT:P/PR:N/UI:N/VC:N/VI:N/VA:H/SC:N/SI:N/SA:N",
      "type": "CVSS_V4"
    }
  ],
  "summary": "Netty affected by MadeYouReset HTTP/2 DDoS vulnerability"
}