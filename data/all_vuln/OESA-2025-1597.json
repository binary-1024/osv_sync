{
  "affected": [
    {
      "database_specific": {
        "source": "https://repo.openeuler.org/security/data/osv/OESA-2025-1597.json"
      },
      "ecosystem_specific": {
        "aarch64": [
          "kernel-5.10.0-266.0.0.168.oe2203sp3.aarch64.rpm",
          "kernel-debuginfo-5.10.0-266.0.0.168.oe2203sp3.aarch64.rpm",
          "kernel-debugsource-5.10.0-266.0.0.168.oe2203sp3.aarch64.rpm",
          "kernel-devel-5.10.0-266.0.0.168.oe2203sp3.aarch64.rpm",
          "kernel-headers-5.10.0-266.0.0.168.oe2203sp3.aarch64.rpm",
          "kernel-source-5.10.0-266.0.0.168.oe2203sp3.aarch64.rpm",
          "kernel-tools-5.10.0-266.0.0.168.oe2203sp3.aarch64.rpm",
          "kernel-tools-debuginfo-5.10.0-266.0.0.168.oe2203sp3.aarch64.rpm",
          "kernel-tools-devel-5.10.0-266.0.0.168.oe2203sp3.aarch64.rpm",
          "perf-5.10.0-266.0.0.168.oe2203sp3.aarch64.rpm",
          "perf-debuginfo-5.10.0-266.0.0.168.oe2203sp3.aarch64.rpm",
          "python3-perf-5.10.0-266.0.0.168.oe2203sp3.aarch64.rpm",
          "python3-perf-debuginfo-5.10.0-266.0.0.168.oe2203sp3.aarch64.rpm"
        ],
        "src": [
          "kernel-5.10.0-266.0.0.168.oe2203sp3.src.rpm"
        ],
        "x86_64": [
          "kernel-5.10.0-266.0.0.168.oe2203sp3.x86_64.rpm",
          "kernel-debuginfo-5.10.0-266.0.0.168.oe2203sp3.x86_64.rpm",
          "kernel-debugsource-5.10.0-266.0.0.168.oe2203sp3.x86_64.rpm",
          "kernel-devel-5.10.0-266.0.0.168.oe2203sp3.x86_64.rpm",
          "kernel-headers-5.10.0-266.0.0.168.oe2203sp3.x86_64.rpm",
          "kernel-source-5.10.0-266.0.0.168.oe2203sp3.x86_64.rpm",
          "kernel-tools-5.10.0-266.0.0.168.oe2203sp3.x86_64.rpm",
          "kernel-tools-debuginfo-5.10.0-266.0.0.168.oe2203sp3.x86_64.rpm",
          "kernel-tools-devel-5.10.0-266.0.0.168.oe2203sp3.x86_64.rpm",
          "perf-5.10.0-266.0.0.168.oe2203sp3.x86_64.rpm",
          "perf-debuginfo-5.10.0-266.0.0.168.oe2203sp3.x86_64.rpm",
          "python3-perf-5.10.0-266.0.0.168.oe2203sp3.x86_64.rpm",
          "python3-perf-debuginfo-5.10.0-266.0.0.168.oe2203sp3.x86_64.rpm"
        ]
      },
      "package": {
        "ecosystem": "openEuler:22.03-LTS-SP3",
        "name": "kernel",
        "purl": "pkg:rpm/openEuler/kernel&distro=openEuler-22.03-LTS-SP3"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "5.10.0-266.0.0.168.oe2203sp3"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "database_specific": {
    "severity": "High"
  },
  "details": "The Linux Kernel, the operating system core itself.\r\n\r\nSecurity Fix(es):\n\nIn the Linux kernel, the following vulnerability has been resolved:\n\ncgroup: Use separate src/dst nodes when preloading css_sets for migration\n\nEach cset (css_set) is pinned by its tasks. When we&apos;re moving tasks around\nacross csets for a migration, we need to hold the source and destination\ncsets to ensure that they don&apos;t go away while we&apos;re moving tasks about. This\nis done by linking cset-&gt;mg_preload_node on either the\nmgctx-&gt;preloaded_src_csets or mgctx-&gt;preloaded_dst_csets list. Using the\nsame cset-&gt;mg_preload_node for both the src and dst lists was deemed okay as\na cset can&apos;t be both the source and destination at the same time.\n\nUnfortunately, this overloading becomes problematic when multiple tasks are\ninvolved in a migration and some of them are identity noop migrations while\nothers are actually moving across cgroups. For example, this can happen with\nthe following sequence on cgroup1:\n\n #1&gt; mkdir -p /sys/fs/cgroup/misc/a/b\n #2&gt; echo $$ &gt; /sys/fs/cgroup/misc/a/cgroup.procs\n #3&gt; RUN_A_COMMAND_WHICH_CREATES_MULTIPLE_THREADS &amp;\n #4&gt; PID=$!\n #5&gt; echo $PID &gt; /sys/fs/cgroup/misc/a/b/tasks\n #6&gt; echo $PID &gt; /sys/fs/cgroup/misc/a/cgroup.procs\n\nthe process including the group leader back into a. In this final migration,\nnon-leader threads would be doing identity migration while the group leader\nis doing an actual one.\n\nAfter #3, let&apos;s say the whole process was in cset A, and that after #4, the\nleader moves to cset B. Then, during #6, the following happens:\n\n 1. cgroup_migrate_add_src() is called on B for the leader.\n\n 2. cgroup_migrate_add_src() is called on A for the other threads.\n\n 3. cgroup_migrate_prepare_dst() is called. It scans the src list.\n\n 4. It notices that B wants to migrate to A, so it tries to A to the dst\n    list but realizes that its -&gt;mg_preload_node is already busy.\n\n 5. and then it notices A wants to migrate to A as it&apos;s an identity\n    migration, it culls it by list_del_init()&apos;ing its -&gt;mg_preload_node and\n    putting references accordingly.\n\n 6. The rest of migration takes place with B on the src list but nothing on\n    the dst list.\n\nThis means that A isn&apos;t held while migration is in progress. If all tasks\nleave A before the migration finishes and the incoming task pins it, the\ncset will be destroyed leading to use-after-free.\n\nThis is caused by overloading cset-&gt;mg_preload_node for both src and dst\npreload lists. We wanted to exclude the cset from the src list but ended up\ninadvertently excluding it from the dst list too.\n\nThis patch fixes the issue by separating out cset-&gt;mg_preload_node into\n-&gt;mg_src_preload_node and -&gt;mg_dst_preload_node, so that the src and dst\npreloadings don&apos;t interfere with each other.(CVE-2022-49647)\n\nIn the Linux kernel, the following vulnerability has been resolved:\n\nfs/jfs: Prevent integer overflow in AG size calculation\n\nThe JFS filesystem calculates allocation group (AG) size using 1 &lt;&lt;\nl2agsize in dbExtendFS(). When l2agsize exceeds 31 (possible with &gt;2TB\naggregates on 32-bit systems), this 32-bit shift operation causes undefined\nbehavior and improper AG sizing.\n\nOn 32-bit architectures:\n- Left-shifting 1 by 32+ bits results in 0 due to integer overflow\n- This creates invalid AG sizes (0 or garbage values) in\nsbi-&gt;bmap-&gt;db_agsize\n- Subsequent block allocations would reference invalid AG structures\n- Could lead to:\n  - Filesystem corruption during extend operations\n  - Kernel crashes due to invalid memory accesses\n  - Security vulnerabilities via malformed on-disk structures\n\nFix by casting to s64 before shifting:\nbmp-&gt;db_agsize = (s64)1 &lt;&lt; l2agsize;\n\nThis ensures 64-bit arithmetic even on 32-bit architectures. The cast\nmatches the data type of db_agsize (s64) and follows similar patterns in\nJFS block calculation code.\n\nFound by Linux Verification Center (linuxtesting.org) with SVACE.(CVE-2025-37858)",
  "id": "OESA-2025-1597",
  "modified": "2025-09-03T06:31:03.979832Z",
  "published": "2025-06-06T14:04:05Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://www.openeuler.org/zh/security/security-bulletins/detail/?id=openEuler-SA-2025-1597"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2022-49647"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-37858"
    }
  ],
  "schema_version": "1.7.3",
  "summary": "kernel security update",
  "upstream": [
    "CVE-2022-49647",
    "CVE-2025-37858"
  ]
}