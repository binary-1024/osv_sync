{
  "affected": [
    {
      "database_specific": {
        "source": "https://repo.openeuler.org/security/data/osv/OESA-2024-2597.json"
      },
      "ecosystem_specific": {
        "noarch": [
          "python-jinja2-help-3.0.3-5.oe2203sp4.noarch.rpm",
          "python3-jinja2-3.0.3-5.oe2203sp4.noarch.rpm"
        ],
        "src": [
          "python-jinja2-3.0.3-5.oe2203sp4.src.rpm"
        ]
      },
      "package": {
        "ecosystem": "openEuler:22.03-LTS-SP4",
        "name": "python-jinja2",
        "purl": "pkg:rpm/openEuler/python-jinja2&distro=openEuler-22.03-LTS-SP4"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "3.0.3-5.oe2203sp4"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "database_specific": {
    "severity": "Critical"
  },
  "details": "Jinja2 is one of the most used template engines for Python. It is inspired by Django&apos;s templating system but extends it with an expressive language that gives template authors a more powerful set of tools. On top of that it adds sandboxed execution and optional automatic escaping for applications where security is important.\r\n\r\nSecurity Fix(es):\r\n\r\nJinja is an extensible templating engine. Prior to 3.1.5, An oversight in how the Jinja sandboxed environment detects calls to str.format allows an attacker that controls the content of a template to execute arbitrary Python code. To exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates. Jinja&apos;s sandbox does catch calls to str.format and ensures they don&apos;t escape the sandbox. However, it&apos;s possible to store a reference to a malicious string&apos;s format method, then pass that to a filter that calls it. No such filters are built-in to Jinja, but could be present through custom filters in an application. After the fix, such indirect calls are also handled by the sandbox. This vulnerability is fixed in 3.1.5.(CVE-2024-56326)",
  "id": "OESA-2024-2597",
  "modified": "2025-09-03T06:20:40.172636Z",
  "published": "2024-12-27T12:33:54Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://www.openeuler.org/zh/security/security-bulletins/detail/?id=openEuler-SA-2024-2597"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-56326"
    }
  ],
  "schema_version": "1.7.3",
  "summary": "python-jinja2 security update",
  "upstream": [
    "CVE-2024-56326"
  ]
}