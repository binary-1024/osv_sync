{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2024-36963.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:13",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.8.11-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2024-36963.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.8.11-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  tracefs: Reset permissions on remount if permissions are options  There's an inconsistency with the way permissions are handled in tracefs. Because the permissions are generated when accessed, they default to the root inode's permission if they were never set by the user. If the user sets the permissions, then a flag is set and the permissions are saved via the inode (for tracefs files) or an internal attribute field (for eventfs).  But if a remount happens that specify the permissions, all the files that were not changed by the user gets updated, but the ones that were are not. If the user were to remount the file system with a given permission, then all files and directories within that file system should be updated.  This can cause security issues if a file's permission was updated but the admin forgot about it. They could incorrectly think that remounting with permissions set would update all files, but miss some.  For example:   # cd /sys/kernel/tracing  # chgrp 1002 current_tracer  # ls -l [..]  -rw-r-----  1 root root 0 May  1 21:25 buffer_size_kb  -rw-r-----  1 root root 0 May  1 21:25 buffer_subbuf_size_kb  -r--r-----  1 root root 0 May  1 21:25 buffer_total_size_kb  -rw-r-----  1 root lkp  0 May  1 21:25 current_tracer  -rw-r-----  1 root root 0 May  1 21:25 dynamic_events  -r--r-----  1 root root 0 May  1 21:25 dyn_ftrace_total_info  -r--r-----  1 root root 0 May  1 21:25 enabled_functions  Where current_tracer now has group \"lkp\".   # mount -o remount,gid=1001 .  # ls -l  -rw-r-----  1 root tracing 0 May  1 21:25 buffer_size_kb  -rw-r-----  1 root tracing 0 May  1 21:25 buffer_subbuf_size_kb  -r--r-----  1 root tracing 0 May  1 21:25 buffer_total_size_kb  -rw-r-----  1 root lkp     0 May  1 21:25 current_tracer  -rw-r-----  1 root tracing 0 May  1 21:25 dynamic_events  -r--r-----  1 root tracing 0 May  1 21:25 dyn_ftrace_total_info  -r--r-----  1 root tracing 0 May  1 21:25 enabled_functions  Everything changed but the \"current_tracer\".  Add a new link list that keeps track of all the tracefs_inodes which has the permission flags that tell if the file/dir should use the root inode's permission or not. Then on remount, clear all the flags so that the default behavior of using the root inode's permission is done for all files and directories.",
  "id": "DEBIAN-CVE-2024-36963",
  "modified": "2025-09-24T00:03:49Z",
  "published": "2024-06-03T08:15:09Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2024-36963"
    }
  ],
  "schema_version": "1.7.3"
}