{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2024-44991.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:12",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.1.112-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": [
        "6.1.106-1",
        "6.1.106-2",
        "6.1.106-3",
        "6.1.27-1",
        "6.1.37-1",
        "6.1.38-1",
        "6.1.38-2",
        "6.1.38-2~bpo11+1",
        "6.1.38-3",
        "6.1.38-4",
        "6.1.38-4~bpo11+1",
        "6.1.52-1",
        "6.1.55-1",
        "6.1.55-1~bpo11+1",
        "6.1.64-1",
        "6.1.66-1",
        "6.1.67-1",
        "6.1.69-1",
        "6.1.69-1~bpo11+1",
        "6.1.76-1",
        "6.1.76-1~bpo11+1",
        "6.1.82-1",
        "6.1.85-1",
        "6.1.90-1",
        "6.1.90-1~bpo11+1",
        "6.1.94-1",
        "6.1.94-1~bpo11+1",
        "6.1.98-1",
        "6.1.99-1"
      ]
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2024-44991.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:13",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.10.7-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2024-44991.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.10.7-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2024-44991.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:11",
        "name": "linux-6.1",
        "purl": "pkg:deb/debian/linux-6.1?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.1.119-1~deb11u1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": [
        "6.1.106-3~deb11u1",
        "6.1.106-3~deb11u2",
        "6.1.106-3~deb11u3",
        "6.1.112-1~deb11u1"
      ]
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  tcp: prevent concurrent execution of tcp_sk_exit_batch  Its possible that two threads call tcp_sk_exit_batch() concurrently, once from the cleanup_net workqueue, once from a task that failed to clone a new netns.  In the latter case, error unwinding calls the exit handlers in reverse order for the 'failed' netns.  tcp_sk_exit_batch() calls tcp_twsk_purge(). Problem is that since commit b099ce2602d8 (\"net: Batch inet_twsk_purge\"), this function picks up twsk in any dying netns, not just the one passed in via exit_batch list.  This means that the error unwind of setup_net() can \"steal\" and destroy timewait sockets belonging to the exiting netns.  This allows the netns exit worker to proceed to call  WARN_ON_ONCE(!refcount_dec_and_test(&net->ipv4.tcp_death_row.tw_refcount));  without the expected 1 -> 0 transition, which then splats.  At same time, error unwind path that is also running inet_twsk_purge() will splat as well:  WARNING: .. at lib/refcount.c:31 refcount_warn_saturate+0x1ed/0x210 ...  refcount_dec include/linux/refcount.h:351 [inline]  inet_twsk_kill+0x758/0x9c0 net/ipv4/inet_timewait_sock.c:70  inet_twsk_deschedule_put net/ipv4/inet_timewait_sock.c:221  inet_twsk_purge+0x725/0x890 net/ipv4/inet_timewait_sock.c:304  tcp_sk_exit_batch+0x1c/0x170 net/ipv4/tcp_ipv4.c:3522  ops_exit_list+0x128/0x180 net/core/net_namespace.c:178  setup_net+0x714/0xb40 net/core/net_namespace.c:375  copy_net_ns+0x2f0/0x670 net/core/net_namespace.c:508  create_new_namespaces+0x3ea/0xb10 kernel/nsproxy.c:110  ... because refcount_dec() of tw_refcount unexpectedly dropped to 0.  This doesn't seem like an actual bug (no tw sockets got lost and I don't see a use-after-free) but as erroneous trigger of debug check.  Add a mutex to force strict ordering: the task that calls tcp_twsk_purge() blocks other task from doing final _dec_and_test before mutex-owner has removed all tw sockets of dying netns.",
  "id": "DEBIAN-CVE-2024-44991",
  "modified": "2025-09-25T04:10:28.553939Z",
  "published": "2024-09-04T20:15:08Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2024-44991"
    }
  ],
  "schema_version": "1.7.3",
  "upstream": [
    "CVE-2024-44991"
  ]
}