{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2025-22123.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:13",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.12.33-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2025-22123.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.12.33-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  f2fs: fix to avoid accessing uninitialized curseg  syzbot reports a f2fs bug as below:  F2FS-fs (loop3): Stopped filesystem due to reason: 7 kworker/u8:7: attempt to access beyond end of device BUG: unable to handle page fault for address: ffffed1604ea3dfa RIP: 0010:get_ckpt_valid_blocks fs/f2fs/segment.h:361 [inline] RIP: 0010:has_curseg_enough_space fs/f2fs/segment.h:570 [inline] RIP: 0010:__get_secs_required fs/f2fs/segment.h:620 [inline] RIP: 0010:has_not_enough_free_secs fs/f2fs/segment.h:633 [inline] RIP: 0010:has_enough_free_secs+0x575/0x1660 fs/f2fs/segment.h:649  <TASK>  f2fs_is_checkpoint_ready fs/f2fs/segment.h:671 [inline]  f2fs_write_inode+0x425/0x540 fs/f2fs/inode.c:791  write_inode fs/fs-writeback.c:1525 [inline]  __writeback_single_inode+0x708/0x10d0 fs/fs-writeback.c:1745  writeback_sb_inodes+0x820/0x1360 fs/fs-writeback.c:1976  wb_writeback+0x413/0xb80 fs/fs-writeback.c:2156  wb_do_writeback fs/fs-writeback.c:2303 [inline]  wb_workfn+0x410/0x1080 fs/fs-writeback.c:2343  process_one_work kernel/workqueue.c:3236 [inline]  process_scheduled_works+0xa66/0x1840 kernel/workqueue.c:3317  worker_thread+0x870/0xd30 kernel/workqueue.c:3398  kthread+0x7a9/0x920 kernel/kthread.c:464  ret_from_fork+0x4b/0x80 arch/x86/kernel/process.c:148  ret_from_fork_asm+0x1a/0x30 arch/x86/entry/entry_64.S:244  Commit 8b10d3653735 (\"f2fs: introduce FAULT_NO_SEGMENT\") allows to trigger no free segment fault in allocator, then it will update curseg->segno to NULL_SEGNO, though, CP_ERROR_FLAG has been set, f2fs_write_inode() missed to check the flag, and access invalid curseg->segno directly in below call path, then resulting in panic:  - f2fs_write_inode  - f2fs_is_checkpoint_ready   - has_enough_free_secs    - has_not_enough_free_secs     - __get_secs_required      - has_curseg_enough_space       - get_ckpt_valid_blocks       : access invalid curseg->segno  To avoid this issue, let's: - check CP_ERROR_FLAG flag in prior to f2fs_is_checkpoint_ready() in f2fs_write_inode(). - in has_curseg_enough_space(), save curseg->segno into a temp variable, and verify its validation before use.",
  "id": "DEBIAN-CVE-2025-22123",
  "modified": "2025-09-25T04:33:42.242199Z",
  "published": "2025-04-16T15:16:06Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2025-22123"
    }
  ],
  "schema_version": "1.7.3",
  "upstream": [
    "CVE-2025-22123"
  ]
}