{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-49771.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:11",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "5.10.158-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": [
        "5.10.103-1",
        "5.10.103-1~bpo10+1",
        "5.10.106-1",
        "5.10.113-1",
        "5.10.120-1",
        "5.10.120-1~bpo10+1",
        "5.10.127-1",
        "5.10.127-2",
        "5.10.127-2~bpo10+1",
        "5.10.136-1",
        "5.10.140-1",
        "5.10.148-1",
        "5.10.149-1",
        "5.10.149-2",
        "5.10.46-4",
        "5.10.46-5",
        "5.10.70-1",
        "5.10.70-1~bpo10+1",
        "5.10.84-1",
        "5.10.92-1",
        "5.10.92-1~bpo10+1",
        "5.10.92-2"
      ]
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-49771.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:12",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.0.10-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-49771.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:13",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.0.10-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-49771.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.0.10-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  dm ioctl: fix misbehavior if list_versions races with module loading  __list_versions will first estimate the required space using the \"dm_target_iterate(list_version_get_needed, &needed)\" call and then will fill the space using the \"dm_target_iterate(list_version_get_info, &iter_info)\" call. Each of these calls locks the targets using the \"down_read(&_lock)\" and \"up_read(&_lock)\" calls, however between the first and second \"dm_target_iterate\" there is no lock held and the target modules can be loaded at this point, so the second \"dm_target_iterate\" call may need more space than what was the first \"dm_target_iterate\" returned.  The code tries to handle this overflow (see the beginning of list_version_get_info), however this handling is incorrect.  The code sets \"param->data_size = param->data_start + needed\" and \"iter_info.end = (char *)vers+len\" - \"needed\" is the size returned by the first dm_target_iterate call; \"len\" is the size of the buffer allocated by userspace.  \"len\" may be greater than \"needed\"; in this case, the code will write up to \"len\" bytes into the buffer, however param->data_size is set to \"needed\", so it may write data past the param->data_size value. The ioctl interface copies only up to param->data_size into userspace, thus part of the result will be truncated.  Fix this bug by setting \"iter_info.end = (char *)vers + needed;\" - this guarantees that the second \"dm_target_iterate\" call will write only up to the \"needed\" buffer and it will exit with \"DM_BUFFER_FULL_FLAG\" if it overflows the \"needed\" space - in this case, userspace will allocate a larger buffer and retry.  Note that there is also a bug in list_version_get_needed - we need to add \"strlen(tt->name) + 1\" to the needed size, not \"strlen(tt->name)\".",
  "id": "DEBIAN-CVE-2022-49771",
  "modified": "2025-09-30T05:15:58.139165Z",
  "published": "2025-05-01T15:16:00Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2022-49771"
    }
  ],
  "schema_version": "1.7.3",
  "upstream": [
    "CVE-2022-49771"
  ]
}