{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2023-53489.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:11",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "5.10.191-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": [
        "5.10.103-1",
        "5.10.103-1~bpo10+1",
        "5.10.106-1",
        "5.10.113-1",
        "5.10.120-1",
        "5.10.120-1~bpo10+1",
        "5.10.127-1",
        "5.10.127-2",
        "5.10.127-2~bpo10+1",
        "5.10.136-1",
        "5.10.140-1",
        "5.10.148-1",
        "5.10.149-1",
        "5.10.149-2",
        "5.10.158-1",
        "5.10.158-2",
        "5.10.162-1",
        "5.10.178-1",
        "5.10.178-2",
        "5.10.178-3",
        "5.10.179-1",
        "5.10.179-2",
        "5.10.179-3",
        "5.10.179-4",
        "5.10.179-5",
        "5.10.46-4",
        "5.10.46-5",
        "5.10.70-1",
        "5.10.70-1~bpo10+1",
        "5.10.84-1",
        "5.10.92-1",
        "5.10.92-1~bpo10+1",
        "5.10.92-2"
      ]
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2023-53489.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:12",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.1.37-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": [
        "6.1.27-1"
      ]
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2023-53489.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:13",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.3.7-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2023-53489.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.3.7-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  tcp/udp: Fix memleaks of sk and zerocopy skbs with TX timestamp.  syzkaller reported [0] memory leaks of an UDP socket and ZEROCOPY skbs.  We can reproduce the problem with these sequences:    sk = socket(AF_INET, SOCK_DGRAM, 0)   sk.setsockopt(SOL_SOCKET, SO_TIMESTAMPING, SOF_TIMESTAMPING_TX_SOFTWARE)   sk.setsockopt(SOL_SOCKET, SO_ZEROCOPY, 1)   sk.sendto(b'', MSG_ZEROCOPY, ('127.0.0.1', 53))   sk.close()  sendmsg() calls msg_zerocopy_alloc(), which allocates a skb, sets skb->cb->ubuf.refcnt to 1, and calls sock_hold().  Here, struct ubuf_info_msgzc indirectly holds a refcnt of the socket.  When the skb is sent, __skb_tstamp_tx() clones it and puts the clone into the socket's error queue with the TX timestamp.  When the original skb is received locally, skb_copy_ubufs() calls skb_unclone(), and pskb_expand_head() increments skb->cb->ubuf.refcnt. This additional count is decremented while freeing the skb, but struct ubuf_info_msgzc still has a refcnt, so __msg_zerocopy_callback() is not called.  The last refcnt is not released unless we retrieve the TX timestamped skb by recvmsg().  Since we clear the error queue in inet_sock_destruct() after the socket's refcnt reaches 0, there is a circular dependency. If we close() the socket holding such skbs, we never call sock_put() and leak the count, sk, and skb.  TCP has the same problem, and commit e0c8bccd40fc (\"net: stream: purge sk_error_queue in sk_stream_kill_queues()\") tried to fix it by calling skb_queue_purge() during close().  However, there is a small chance that skb queued in a qdisc or device could be put into the error queue after the skb_queue_purge() call.  In __skb_tstamp_tx(), the cloned skb should not have a reference to the ubuf to remove the circular dependency, but skb_clone() does not call skb_copy_ubufs() for zerocopy skb.  So, we need to call skb_orphan_frags_rx() for the cloned skb to call skb_copy_ubufs().  [0]: BUG: memory leak unreferenced object 0xffff88800c6d2d00 (size 1152):   comm \"syz-executor392\", pid 264, jiffies 4294785440 (age 13.044s)   hex dump (first 32 bytes):     00 00 00 00 00 00 00 00 cd af e8 81 00 00 00 00  ................     02 00 07 40 00 00 00 00 00 00 00 00 00 00 00 00  ...@............   backtrace:     [<0000000055636812>] sk_prot_alloc+0x64/0x2a0 net/core/sock.c:2024     [<0000000054d77b7a>] sk_alloc+0x3b/0x800 net/core/sock.c:2083     [<0000000066f3c7e0>] inet_create net/ipv4/af_inet.c:319 [inline]     [<0000000066f3c7e0>] inet_create+0x31e/0xe40 net/ipv4/af_inet.c:245     [<000000009b83af97>] __sock_create+0x2ab/0x550 net/socket.c:1515     [<00000000b9b11231>] sock_create net/socket.c:1566 [inline]     [<00000000b9b11231>] __sys_socket_create net/socket.c:1603 [inline]     [<00000000b9b11231>] __sys_socket_create net/socket.c:1588 [inline]     [<00000000b9b11231>] __sys_socket+0x138/0x250 net/socket.c:1636     [<000000004fb45142>] __do_sys_socket net/socket.c:1649 [inline]     [<000000004fb45142>] __se_sys_socket net/socket.c:1647 [inline]     [<000000004fb45142>] __x64_sys_socket+0x73/0xb0 net/socket.c:1647     [<0000000066999e0e>] do_syscall_x64 arch/x86/entry/common.c:50 [inline]     [<0000000066999e0e>] do_syscall_64+0x38/0x90 arch/x86/entry/common.c:80     [<0000000017f238c1>] entry_SYSCALL_64_after_hwframe+0x63/0xcd  BUG: memory leak unreferenced object 0xffff888017633a00 (size 240):   comm \"syz-executor392\", pid 264, jiffies 4294785440 (age 13.044s)   hex dump (first 32 bytes):     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................     00 00 00 00 00 00 00 00 00 2d 6d 0c 80 88 ff ff  .........-m.....   backtrace:     [<000000002b1c4368>] __alloc_skb+0x229/0x320 net/core/skbuff.c:497     [<00000000143579a6>] alloc_skb include/linux/skbuff.h:1265 [inline]     [<00000000143579a6>] sock_omalloc+0xaa/0x190 net/core/sock.c:2596     [<00000000be626478>] msg_zerocopy_alloc net/core/skbuff.c:1294 [inline]     [<00000000be626478>] ---truncated---",
  "id": "DEBIAN-CVE-2023-53489",
  "modified": "2025-10-02T09:25:42.785384Z",
  "published": "2025-10-01T12:15:51Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2023-53489"
    }
  ],
  "schema_version": "1.7.3",
  "upstream": [
    "CVE-2023-53489"
  ]
}