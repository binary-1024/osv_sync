{
  "affected": [
    {
      "database_specific": {
        "source": "https://github.com/github/advisory-database/blob/main/advisories/github-reviewed/2025/05/GHSA-jf2r-x3j4-23m7/GHSA-jf2r-x3j4-23m7.json"
      },
      "package": {
        "ecosystem": "crates.io",
        "name": "openvm",
        "purl": "pkg:cargo/openvm"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "1.0.0"
            },
            {
              "fixed": "1.1.0"
            }
          ],
          "type": "SEMVER"
        }
      ],
      "versions": [
        "1.0.0"
      ]
    }
  ],
  "aliases": [
    "CVE-2025-46723"
  ],
  "database_specific": {
    "cwe_ids": [
      "CWE-131"
    ],
    "github_reviewed": true,
    "github_reviewed_at": "2025-05-05T19:57:09Z",
    "nvd_published_at": "2025-05-02T23:15:16Z",
    "severity": "HIGH"
  },
  "details": "The fix to https://cantina.xyz/code/c486d600-bed0-4fc6-aed1-de759fd29fa2/findings/21 has a typo that still results in the highest limb of `pc` being range checked to 8-bits instead of 6-bits.\n\nIn the AIR, we do https://github.com/openvm-org/openvm/blob/0f94c8a3dfa7536c1231465d1bdee5fc607a5993/extensions/rv32im/circuit/src/auipc/core.rs#L135\n```\n        for (i, limb) in pc_limbs.iter().skip(1).enumerate() {\n            if i == pc_limbs.len() - 1 {\n```\n\nIt should be\n```\n        for (i, limb) in pc_limbs.iter().enumerate().skip(1) {\n```\n\nRight now the if statement is never triggered because the enumeration gives `i=0,1,2` when we instead want `i=1,2,3`. What this means is that `pc_limbs[3]` is range checked to 8-bits instead of 6-bits.\n\nThis leads to a vulnerability where the `pc_limbs` decomposition differs from the true `pc`, which means a malicious prover can make the destination register take a different value than the AUIPC instruction dictates, by making the decomposition overflow the BabyBear field.",
  "id": "GHSA-jf2r-x3j4-23m7",
  "modified": "2025-05-05T20:42:09.376504Z",
  "published": "2025-05-05T19:57:09Z",
  "references": [
    {
      "type": "WEB",
      "url": "https://github.com/openvm-org/openvm/security/advisories/GHSA-jf2r-x3j4-23m7"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2025-46723"
    },
    {
      "type": "WEB",
      "url": "https://github.com/openvm-org/openvm/commit/68da4b50c033da5603517064aa0a08e1bbf70a01"
    },
    {
      "type": "WEB",
      "url": "https://cantina.xyz/code/c486d600-bed0-4fc6-aed1-de759fd29fa2/findings/21"
    },
    {
      "type": "PACKAGE",
      "url": "https://github.com/openvm-org/openvm"
    },
    {
      "type": "WEB",
      "url": "https://github.com/openvm-org/openvm/blob/0f94c8a3dfa7536c1231465d1bdee5fc607a5993/extensions/rv32im/circuit/src/auipc/core.rs#L135"
    },
    {
      "type": "WEB",
      "url": "https://github.com/openvm-org/openvm/releases/tag/v1.1.0"
    }
  ],
  "schema_version": "1.7.3",
  "severity": [
    {
      "score": "CVSS:4.0/AV:N/AC:L/AT:N/PR:N/UI:N/VC:N/VI:H/VA:H/SC:N/SI:N/SA:N/E:P",
      "type": "CVSS_V4"
    }
  ],
  "summary": "OpenVM allows the byte decomposition of pc in AUIPC chip to overflow"
}