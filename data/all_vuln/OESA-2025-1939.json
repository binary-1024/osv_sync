{
  "affected": [
    {
      "database_specific": {
        "source": "https://repo.openeuler.org/security/data/osv/OESA-2025-1939.json"
      },
      "ecosystem_specific": {
        "noarch": [
          "python-Flask-Cors-help-6.0.1-1.oe2403sp1.noarch.rpm",
          "python3-Flask-Cors-6.0.1-1.oe2403sp1.noarch.rpm"
        ],
        "src": [
          "python-Flask-Cors-6.0.1-1.oe2403sp1.src.rpm"
        ]
      },
      "package": {
        "ecosystem": "openEuler:24.03-LTS-SP1",
        "name": "python-Flask-Cors",
        "purl": "pkg:rpm/openEuler/python-Flask-Cors&distro=openEuler-24.03-LTS-SP1"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.0.1-1.oe2403sp1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "database_specific": {
    "severity": "Medium"
  },
  "details": "A Flask extension for handling Cross Origin Resource Sharing (CORS), making cross-origin AJAX possible.\r\n\r\nSecurity Fix(es):\n\ncorydolphin/flask-cors version 4.0.1 contains an improper regex path matching vulnerability. The plugin prioritizes longer regex patterns over more specific ones when matching paths, which can lead to less restrictive CORS policies being applied to sensitive endpoints. This mismatch in regex pattern priority allows unauthorized cross-origin access to sensitive data or functionality, potentially exposing confidential information and increasing the risk of unauthorized actions by malicious actors.(CVE-2024-6839)\n\nA vulnerability in corydolphin/flask-cors version 4.0.1 allows for inconsistent CORS matching due to the handling of the &apos;+&apos; character in URL paths. The request.path is passed through the unquote_plus function, which converts the &apos;+&apos; character to a space &apos; &apos;. This behavior leads to incorrect path normalization, causing potential mismatches in CORS configuration. As a result, endpoints may not be matched correctly to their CORS settings, leading to unexpected CORS policy application. This can cause unauthorized cross-origin access or block valid requests, creating security vulnerabilities and usability issues.(CVE-2024-6844)\n\ncorydolphin/flask-cors version 4.01 contains a vulnerability where the request path matching is case-insensitive due to the use of the `try_match` function, which is originally intended for matching hosts. This results in a mismatch because paths in URLs are case-sensitive, but the regex matching treats them as case-insensitive. This misconfiguration can lead to significant security vulnerabilities, allowing unauthorized origins to access paths meant to be restricted, resulting in data exposure and potential data leaks.(CVE-2024-6866)",
  "id": "OESA-2025-1939",
  "modified": "2025-09-03T06:31:18.728054Z",
  "published": "2025-08-01T13:03:34Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://www.openeuler.org/zh/security/security-bulletins/detail/?id=openEuler-SA-2025-1939"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-6839"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-6844"
    },
    {
      "type": "ADVISORY",
      "url": "https://nvd.nist.gov/vuln/detail/CVE-2024-6866"
    }
  ],
  "schema_version": "1.7.3",
  "summary": "python-Flask-Cors security update",
  "upstream": [
    "CVE-2024-6839",
    "CVE-2024-6844",
    "CVE-2024-6866"
  ]
}