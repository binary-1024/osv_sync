{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2024-26831.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:13",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.7.7-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2024-26831.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.7.7-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  net/handshake: Fix handshake_req_destroy_test1  Recently, handshake_req_destroy_test1 started failing:  Expected handshake_req_destroy_test == req, but     handshake_req_destroy_test == 0000000000000000     req == 0000000060f99b40 not ok 11 req_destroy works  This is because \"sock_release(sock)\" was replaced with \"fput(filp)\" to address a memory leak. Note that sock_release() is synchronous but fput() usually delays the final close and clean-up.  The delay is not consequential in the other cases that were changed but handshake_req_destroy_test1 is testing that handshake_req_cancel() followed by closing the file actually does call the ->hp_destroy method. Thus the PTR_EQ test at the end has to be sure that the final close is complete before it checks the pointer.  We cannot use a completion here because if ->hp_destroy is never called (ie, there is an API bug) then the test will hang.  Reported by: Guenter Roeck <linux@roeck-us.net>",
  "id": "DEBIAN-CVE-2024-26831",
  "modified": "2025-09-24T00:04:11Z",
  "published": "2024-04-17T10:15:09Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2024-26831"
    }
  ],
  "schema_version": "1.7.3"
}