{
  "affected": [
    {
      "database_specific": {
        "categories": [
          "memory-corruption",
          "thread-safety"
        ],
        "cvss": null,
        "informational": null,
        "source": "https://github.com/rustsec/advisory-db/blob/osv/crates/RUSTSEC-2021-0113.json"
      },
      "ecosystem_specific": {
        "affected_functions": null,
        "affects": {
          "arch": [],
          "functions": [],
          "os": []
        }
      },
      "package": {
        "ecosystem": "crates.io",
        "name": "metrics-util",
        "purl": "pkg:cargo/metrics-util"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0.0.0-0"
            },
            {
              "fixed": "0.7.0"
            }
          ],
          "type": "SEMVER"
        }
      ]
    }
  ],
  "aliases": [
    "CVE-2021-45704",
    "GHSA-3hxh-7jxm-59x4",
    "GHSA-cwvc-87xq-pc5m"
  ],
  "database_specific": {
    "license": "CC0-1.0"
  },
  "details": "In the affected versions of the crate, `AtomicBucket<T>` unconditionally implements `Send`/`Sync` traits. Therefore, users can create a data race to the inner\n`T: !Sync` by using the `AtomicBucket::data_with()` API.\nSuch data races can potentially cause memory corruption or other undefined behavior.\n\nThe flaw was fixed in commit 8e6daab by adding appropriate Send/Sync bounds to the Send/Sync impl of struct `Block<T>` (which is a data type contained inside `AtomicBucket<T>`).",
  "id": "RUSTSEC-2021-0113",
  "modified": "2023-11-08T04:07:22.868706Z",
  "published": "2021-04-07T12:00:00Z",
  "references": [
    {
      "type": "PACKAGE",
      "url": "https://crates.io/crates/metrics-util"
    },
    {
      "type": "ADVISORY",
      "url": "https://rustsec.org/advisories/RUSTSEC-2021-0113.html"
    },
    {
      "type": "REPORT",
      "url": "https://github.com/metrics-rs/metrics/issues/190"
    }
  ],
  "schema_version": "1.7.0",
  "summary": "AtomicBucket<T> unconditionally implements Send/Sync"
}