{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2025-39941.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.16.9-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": [
        "6.12.38-1",
        "6.12.41-1",
        "6.12.43-1",
        "6.12.43-1~bpo12+1",
        "6.12.48-1",
        "6.13.10-1~exp1",
        "6.13.11-1~exp1",
        "6.13.2-1~exp1",
        "6.13.3-1~exp1",
        "6.13.4-1~exp1",
        "6.13.5-1~exp1",
        "6.13.6-1~exp1",
        "6.13.7-1~exp1",
        "6.13.8-1~exp1",
        "6.13.9-1~exp1",
        "6.13~rc6-1~exp1",
        "6.13~rc7-1~exp1",
        "6.14.3-1~exp1",
        "6.14.5-1~exp1",
        "6.14.6-1~exp1",
        "6.15-1~exp1",
        "6.15.1-1~exp1",
        "6.15.2-1~exp1",
        "6.15.3-1~exp1",
        "6.15.4-1~exp1",
        "6.15.5-1~exp1",
        "6.15.6-1~exp1",
        "6.15~rc7-1~exp1",
        "6.16-1~exp1",
        "6.16.1-1~exp1",
        "6.16.3-1",
        "6.16.3-1~bpo13+1",
        "6.16.5-1",
        "6.16.6-1",
        "6.16.7-1",
        "6.16.8-1",
        "6.16~rc7-1~exp1"
      ]
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  zram: fix slot write race condition  Parallel concurrent writes to the same zram index result in leaked zsmalloc handles.  Schematically we can have something like this:  CPU0                              CPU1 zram_slot_lock() zs_free(handle) zram_slot_lock() \t\t\t\tzram_slot_lock() \t\t\t\tzs_free(handle) \t\t\t\tzram_slot_lock()  compress\t\t\tcompress handle = zs_malloc()\t\thandle = zs_malloc() zram_slot_lock zram_set_handle(handle) zram_slot_lock \t\t\t\tzram_slot_lock \t\t\t\tzram_set_handle(handle) \t\t\t\tzram_slot_lock  Either CPU0 or CPU1 zsmalloc handle will leak because zs_free() is done too early.  In fact, we need to reset zram entry right before we set its new handle, all under the same slot lock scope.",
  "id": "DEBIAN-CVE-2025-39941",
  "modified": "2025-10-05T08:08:26.618056Z",
  "published": "2025-10-04T08:15:47Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2025-39941"
    }
  ],
  "schema_version": "1.7.3",
  "upstream": [
    "CVE-2025-39941"
  ]
}