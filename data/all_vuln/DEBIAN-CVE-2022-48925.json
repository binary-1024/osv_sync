{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-48925.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:11",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "5.10.103-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": [
        "5.10.103-1~bpo10+1",
        "5.10.46-4",
        "5.10.46-5",
        "5.10.70-1",
        "5.10.70-1~bpo10+1",
        "5.10.84-1",
        "5.10.92-1",
        "5.10.92-1~bpo10+1",
        "5.10.92-2"
      ]
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-48925.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:12",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "5.16.12-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-48925.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:13",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "5.16.12-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-48925.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "5.16.12-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  RDMA/cma: Do not change route.addr.src_addr outside state checks  If the state is not idle then resolve_prepare_src() should immediately fail and no change to global state should happen. However, it unconditionally overwrites the src_addr trying to build a temporary any address.  For instance if the state is already RDMA_CM_LISTEN then this will corrupt the src_addr and would cause the test in cma_cancel_operation():             if (cma_any_addr(cma_src_addr(id_priv)) && !id_priv->cma_dev)  Which would manifest as this trace from syzkaller:    BUG: KASAN: use-after-free in __list_add_valid+0x93/0xa0 lib/list_debug.c:26   Read of size 8 at addr ffff8881546491e0 by task syz-executor.1/32204    CPU: 1 PID: 32204 Comm: syz-executor.1 Not tainted 5.12.0-rc8-syzkaller #0   Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011   Call Trace:    __dump_stack lib/dump_stack.c:79 [inline]    dump_stack+0x141/0x1d7 lib/dump_stack.c:120    print_address_description.constprop.0.cold+0x5b/0x2f8 mm/kasan/report.c:232    __kasan_report mm/kasan/report.c:399 [inline]    kasan_report.cold+0x7c/0xd8 mm/kasan/report.c:416    __list_add_valid+0x93/0xa0 lib/list_debug.c:26    __list_add include/linux/list.h:67 [inline]    list_add_tail include/linux/list.h:100 [inline]    cma_listen_on_all drivers/infiniband/core/cma.c:2557 [inline]    rdma_listen+0x787/0xe00 drivers/infiniband/core/cma.c:3751    ucma_listen+0x16a/0x210 drivers/infiniband/core/ucma.c:1102    ucma_write+0x259/0x350 drivers/infiniband/core/ucma.c:1732    vfs_write+0x28e/0xa30 fs/read_write.c:603    ksys_write+0x1ee/0x250 fs/read_write.c:658    do_syscall_64+0x2d/0x70 arch/x86/entry/common.c:46    entry_SYSCALL_64_after_hwframe+0x44/0xae  This is indicating that an rdma_id_private was destroyed without doing cma_cancel_listens().  Instead of trying to re-use the src_addr memory to indirectly create an any address derived from the dst build one explicitly on the stack and bind to that as any other normal flow would do. rdma_bind_addr() will copy it over the src_addr once it knows the state is valid.  This is similar to commit bc0bdc5afaa7 (\"RDMA/cma: Do not change route.addr.src_addr.ss_family\")",
  "id": "DEBIAN-CVE-2022-48925",
  "modified": "2025-09-25T03:12:41.932500Z",
  "published": "2024-08-22T02:15:08Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2022-48925"
    }
  ],
  "schema_version": "1.7.3",
  "upstream": [
    "CVE-2022-48925"
  ]
}