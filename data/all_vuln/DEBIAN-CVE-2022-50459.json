{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-50459.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:11",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "5.10.158-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": [
        "5.10.103-1",
        "5.10.103-1~bpo10+1",
        "5.10.106-1",
        "5.10.113-1",
        "5.10.120-1",
        "5.10.120-1~bpo10+1",
        "5.10.127-1",
        "5.10.127-2",
        "5.10.127-2~bpo10+1",
        "5.10.136-1",
        "5.10.140-1",
        "5.10.148-1",
        "5.10.149-1",
        "5.10.149-2",
        "5.10.46-4",
        "5.10.46-5",
        "5.10.70-1",
        "5.10.70-1~bpo10+1",
        "5.10.84-1",
        "5.10.92-1",
        "5.10.92-1~bpo10+1",
        "5.10.92-2"
      ]
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-50459.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:12",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.0.3-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-50459.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:13",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.0.3-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-50459.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.0.3-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  scsi: iscsi: iscsi_tcp: Fix null-ptr-deref while calling getpeername()  Fix a NULL pointer crash that occurs when we are freeing the socket at the same time we access it via sysfs.  The problem is that:   1. iscsi_sw_tcp_conn_get_param() and iscsi_sw_tcp_host_get_param() take     the frwd_lock and do sock_hold() then drop the frwd_lock. sock_hold()     does a get on the \"struct sock\".   2. iscsi_sw_tcp_release_conn() does sockfd_put() which does the last put     on the \"struct socket\" and that does __sock_release() which sets the     sock->ops to NULL.   3. iscsi_sw_tcp_conn_get_param() and iscsi_sw_tcp_host_get_param() then     call kernel_getpeername() which accesses the NULL sock->ops.  Above we do a get on the \"struct sock\", but we needed a get on the \"struct socket\". Originally, we just held the frwd_lock the entire time but in commit bcf3a2953d36 (\"scsi: iscsi: iscsi_tcp: Avoid holding spinlock while calling getpeername()\") we switched to refcount based because the network layer changed and started taking a mutex in that path, so we could no longer hold the frwd_lock.  Instead of trying to maintain multiple refcounts, this just has us use a mutex for accessing the socket in the interface code paths.",
  "id": "DEBIAN-CVE-2022-50459",
  "modified": "2025-10-02T09:25:35.463441Z",
  "published": "2025-10-01T12:15:39Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2022-50459"
    }
  ],
  "schema_version": "1.7.3",
  "upstream": [
    "CVE-2022-50459"
  ]
}