{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2023-53493.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:13",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.4.11-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2023-53493.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.4.11-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  accel/qaic: tighten bounds checking in decode_message()  Copy the bounds checking from encode_message() to decode_message().  This patch addresses the following concerns.  Ensure that there is enough space for at least one header so that we don't have a negative size later.  \tif (msg_hdr_len < sizeof(*trans_hdr))  Ensure that we have enough space to read the next header from the msg->data.  \tif (msg_len > msg_hdr_len - sizeof(*trans_hdr)) \t\treturn -EINVAL;  Check that the trans_hdr->len is not below the minimum size:  \tif (hdr_len < sizeof(*trans_hdr))  This minimum check ensures that we don't corrupt memory in decode_passthrough() when we do.  \tmemcpy(out_trans->data, in_trans->data, len - sizeof(in_trans->hdr));  And finally, use size_add() to prevent an integer overflow:  \tif (size_add(msg_len, hdr_len) > msg_hdr_len)",
  "id": "DEBIAN-CVE-2023-53493",
  "modified": "2025-10-02T09:00:41Z",
  "published": "2025-10-01T12:15:52Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2023-53493"
    }
  ],
  "schema_version": "1.7.3",
  "upstream": [
    "CVE-2023-53493"
  ]
}