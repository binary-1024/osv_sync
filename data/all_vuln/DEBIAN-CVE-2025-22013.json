{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2025-22013.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:13",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.12.21-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2025-22013.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.12.21-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  KVM: arm64: Unconditionally save+flush host FPSIMD/SVE/SME state  There are several problems with the way hyp code lazily saves the host's FPSIMD/SVE state, including:  * Host SVE being discarded unexpectedly due to inconsistent   configuration of TIF_SVE and CPACR_ELx.ZEN. This has been seen to   result in QEMU crashes where SVE is used by memmove(), as reported by   Eric Auger:    https://issues.redhat.com/browse/RHEL-68997  * Host SVE state is discarded *after* modification by ptrace, which was an   unintentional ptrace ABI change introduced with lazy discarding of SVE state.  * The host FPMR value can be discarded when running a non-protected VM,   where FPMR support is not exposed to a VM, and that VM uses   FPSIMD/SVE. In these cases the hyp code does not save the host's FPMR   before unbinding the host's FPSIMD/SVE/SME state, leaving a stale   value in memory.  Avoid these by eagerly saving and \"flushing\" the host's FPSIMD/SVE/SME state when loading a vCPU such that KVM does not need to save any of the host's FPSIMD/SVE/SME state. For clarity, fpsimd_kvm_prepare() is removed and the necessary call to fpsimd_save_and_flush_cpu_state() is placed in kvm_arch_vcpu_load_fp(). As 'fpsimd_state' and 'fpmr_ptr' should not be used, they are set to NULL; all uses of these will be removed in subsequent patches.  Historical problems go back at least as far as v5.17, e.g. erroneous assumptions about TIF_SVE being clear in commit:    8383741ab2e773a9 (\"KVM: arm64: Get rid of host SVE tracking/saving\")  ... and so this eager save+flush probably needs to be backported to ALL stable trees.",
  "id": "DEBIAN-CVE-2025-22013",
  "modified": "2025-09-24T00:04:04Z",
  "published": "2025-04-08T09:15:25Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2025-22013"
    }
  ],
  "schema_version": "1.7.3"
}