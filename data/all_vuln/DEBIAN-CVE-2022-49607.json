{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-49607.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:11",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "5.10.136-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": [
        "5.10.103-1",
        "5.10.103-1~bpo10+1",
        "5.10.106-1",
        "5.10.113-1",
        "5.10.120-1",
        "5.10.120-1~bpo10+1",
        "5.10.127-1",
        "5.10.127-2",
        "5.10.127-2~bpo10+1",
        "5.10.46-4",
        "5.10.46-5",
        "5.10.70-1",
        "5.10.70-1~bpo10+1",
        "5.10.84-1",
        "5.10.92-1",
        "5.10.92-1~bpo10+1",
        "5.10.92-2"
      ]
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-49607.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:12",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "5.18.16-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-49607.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:13",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "5.18.16-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2022-49607.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "5.18.16-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  perf/core: Fix data race between perf_event_set_output() and perf_mmap_close()  Yang Jihing reported a race between perf_event_set_output() and perf_mmap_close():  \tCPU1\t\t\t\t\tCPU2  \tperf_mmap_close(e2) \t  if (atomic_dec_and_test(&e2->rb->mmap_count)) // 1 - > 0 \t    detach_rest = true  \t\t\t\t\t\tioctl(e1, IOC_SET_OUTPUT, e2) \t\t\t\t\t\t  perf_event_set_output(e1, e2)  \t  ... \t  list_for_each_entry_rcu(e, &e2->rb->event_list, rb_entry) \t    ring_buffer_attach(e, NULL); \t    // e1 isn't yet added and \t    // therefore not detached  \t\t\t\t\t\t    ring_buffer_attach(e1, e2->rb) \t\t\t\t\t\t      list_add_rcu(&e1->rb_entry, \t\t\t\t\t\t\t\t   &e2->rb->event_list)  After this; e1 is attached to an unmapped rb and a subsequent perf_mmap() will loop forever more:  \tagain: \t\tmutex_lock(&e->mmap_mutex); \t\tif (event->rb) { \t\t\t... \t\t\tif (!atomic_inc_not_zero(&e->rb->mmap_count)) { \t\t\t\t... \t\t\t\tmutex_unlock(&e->mmap_mutex); \t\t\t\tgoto again; \t\t\t} \t\t}  The loop in perf_mmap_close() holds e2->mmap_mutex, while the attach in perf_event_set_output() holds e1->mmap_mutex. As such there is no serialization to avoid this race.  Change perf_event_set_output() to take both e1->mmap_mutex and e2->mmap_mutex to alleviate that problem. Additionally, have the loop in perf_mmap() detach the rb directly, this avoids having to wait for the concurrent perf_mmap_close() to get around to doing it to make progress.",
  "id": "DEBIAN-CVE-2022-49607",
  "modified": "2025-09-24T00:57:03.556487Z",
  "published": "2025-02-26T07:01:36Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2022-49607"
    }
  ],
  "schema_version": "1.7.3"
}