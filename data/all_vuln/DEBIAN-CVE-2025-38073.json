{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2025-38073.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:13",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.12.32-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2025-38073.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.12.32-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  block: fix race between set_blocksize and read paths  With the new large sector size support, it's now the case that set_blocksize can change i_blksize and the folio order in a manner that conflicts with a concurrent reader and causes a kernel crash.  Specifically, let's say that udev-worker calls libblkid to detect the labels on a block device.  The read call can create an order-0 folio to read the first 4096 bytes from the disk.  But then udev is preempted.  Next, someone tries to mount an 8k-sectorsize filesystem from the same block device.  The filesystem calls set_blksize, which sets i_blksize to 8192 and the minimum folio order to 1.  Now udev resumes, still holding the order-0 folio it allocated.  It then tries to schedule a read bio and do_mpage_readahead tries to create bufferheads for the folio.  Unfortunately, blocks_per_folio == 0 because the page size is 4096 but the blocksize is 8192 so no bufferheads are attached and the bh walk never sets bdev.  We then submit the bio with a NULL block device and crash.  Therefore, truncate the page cache after flushing but before updating i_blksize.  However, that's not enough -- we also need to lock out file IO and page faults during the update.  Take both the i_rwsem and the invalidate_lock in exclusive mode for invalidations, and in shared mode for read/write operations.  I don't know if this is the correct fix, but xfs/259 found it.",
  "id": "DEBIAN-CVE-2025-38073",
  "modified": "2025-09-24T00:04:10Z",
  "published": "2025-06-18T10:15:40Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2025-38073"
    }
  ],
  "schema_version": "1.7.3"
}