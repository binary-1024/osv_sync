{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2025-21754.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:13",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.12.15-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/debian-osv/debian-cve-osv/DEBIAN-CVE-2025-21754.json"
      },
      "ecosystem_specific": {
        "urgency": "not yet assigned"
      },
      "package": {
        "ecosystem": "Debian:14",
        "name": "linux",
        "purl": "pkg:deb/debian/linux?arch=source"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.12.15-1"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:  btrfs: fix assertion failure when splitting ordered extent after transaction abort  If while we are doing a direct IO write a transaction abort happens, we mark all existing ordered extents with the BTRFS_ORDERED_IOERR flag (done at btrfs_destroy_ordered_extents()), and then after that if we enter btrfs_split_ordered_extent() and the ordered extent has bytes left (meaning we have a bio that doesn't cover the whole ordered extent, see details at btrfs_extract_ordered_extent()), we will fail on the following assertion at btrfs_split_ordered_extent():     ASSERT(!(flags & ~BTRFS_ORDERED_TYPE_FLAGS));  because the BTRFS_ORDERED_IOERR flag is set and the definition of BTRFS_ORDERED_TYPE_FLAGS is just the union of all flags that identify the type of write (regular, nocow, prealloc, compressed, direct IO, encoded).  Fix this by returning an error from btrfs_extract_ordered_extent() if we find the BTRFS_ORDERED_IOERR flag in the ordered extent. The error will be the error that resulted in the transaction abort or -EIO if no transaction abort happened.  This was recently reported by syzbot with the following trace:     FAULT_INJECTION: forcing a failure.    name failslab, interval 1, probability 0, space 0, times 1    CPU: 0 UID: 0 PID: 5321 Comm: syz.0.0 Not tainted 6.13.0-rc5-syzkaller #0    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.3-debian-1.16.3-2~bpo12+1 04/01/2014    Call Trace:     <TASK>     __dump_stack lib/dump_stack.c:94 [inline]     dump_stack_lvl+0x241/0x360 lib/dump_stack.c:120     fail_dump lib/fault-inject.c:53 [inline]     should_fail_ex+0x3b0/0x4e0 lib/fault-inject.c:154     should_failslab+0xac/0x100 mm/failslab.c:46     slab_pre_alloc_hook mm/slub.c:4072 [inline]     slab_alloc_node mm/slub.c:4148 [inline]     __do_kmalloc_node mm/slub.c:4297 [inline]     __kmalloc_noprof+0xdd/0x4c0 mm/slub.c:4310     kmalloc_noprof include/linux/slab.h:905 [inline]     kzalloc_noprof include/linux/slab.h:1037 [inline]     btrfs_chunk_alloc_add_chunk_item+0x244/0x1100 fs/btrfs/volumes.c:5742     reserve_chunk_space+0x1ca/0x2c0 fs/btrfs/block-group.c:4292     check_system_chunk fs/btrfs/block-group.c:4319 [inline]     do_chunk_alloc fs/btrfs/block-group.c:3891 [inline]     btrfs_chunk_alloc+0x77b/0xf80 fs/btrfs/block-group.c:4187     find_free_extent_update_loop fs/btrfs/extent-tree.c:4166 [inline]     find_free_extent+0x42d1/0x5810 fs/btrfs/extent-tree.c:4579     btrfs_reserve_extent+0x422/0x810 fs/btrfs/extent-tree.c:4672     btrfs_new_extent_direct fs/btrfs/direct-io.c:186 [inline]     btrfs_get_blocks_direct_write+0x706/0xfa0 fs/btrfs/direct-io.c:321     btrfs_dio_iomap_begin+0xbb7/0x1180 fs/btrfs/direct-io.c:525     iomap_iter+0x697/0xf60 fs/iomap/iter.c:90     __iomap_dio_rw+0xeb9/0x25b0 fs/iomap/direct-io.c:702     btrfs_dio_write fs/btrfs/direct-io.c:775 [inline]     btrfs_direct_write+0x610/0xa30 fs/btrfs/direct-io.c:880     btrfs_do_write_iter+0x2a0/0x760 fs/btrfs/file.c:1397     do_iter_readv_writev+0x600/0x880     vfs_writev+0x376/0xba0 fs/read_write.c:1050     do_pwritev fs/read_write.c:1146 [inline]     __do_sys_pwritev2 fs/read_write.c:1204 [inline]     __se_sys_pwritev2+0x196/0x2b0 fs/read_write.c:1195     do_syscall_x64 arch/x86/entry/common.c:52 [inline]     do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83     entry_SYSCALL_64_after_hwframe+0x77/0x7f    RIP: 0033:0x7f1281f85d29    RSP: 002b:00007f12819fe038 EFLAGS: 00000246 ORIG_RAX: 0000000000000148    RAX: ffffffffffffffda RBX: 00007f1282176080 RCX: 00007f1281f85d29    RDX: 0000000000000001 RSI: 0000000020000240 RDI: 0000000000000005    RBP: 00007f12819fe090 R08: 0000000000000000 R09: 0000000000000003    R10: 0000000000007000 R11: 0000000000000246 R12: 0000000000000002    R13: 0000000000000000 R14: 00007f1282176080 R15: 00007ffcb9e23328     </TASK>    BTRFS error (device loop0 state A): Transaction aborted (error -12)    BTRFS: error (device loop0 state A ---truncated---",
  "id": "DEBIAN-CVE-2025-21754",
  "modified": "2025-09-24T00:04:04Z",
  "published": "2025-02-27T03:15:16Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://security-tracker.debian.org/tracker/CVE-2025-21754"
    }
  ],
  "schema_version": "1.7.3"
}